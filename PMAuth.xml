<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PMAuth</name>
    </assembly>
    <members>
        <member name="T:PMAuth.AuthDbContext.BackOfficeContext">
            <summary>
            BackOfficeContext
            </summary>
        </member>
        <member name="P:PMAuth.AuthDbContext.BackOfficeContext.Admins">
            <summary>
            Admins DbSet
            </summary>
        </member>
        <member name="P:PMAuth.AuthDbContext.BackOfficeContext.Apps">
            <summary>
            Apps DbSet
            </summary>
        </member>
        <member name="P:PMAuth.AuthDbContext.BackOfficeContext.Socials">
            <summary>
            Socials DbSet
            </summary>
        </member>
        <member name="P:PMAuth.AuthDbContext.BackOfficeContext.Settings">
            <summary>
            Settings DbSet
            </summary>
        </member>
        <member name="M:PMAuth.AuthDbContext.BackOfficeContext.#ctor(Microsoft.EntityFrameworkCore.DbContextOptions{PMAuth.AuthDbContext.BackOfficeContext})">
            <summary>
            BackOfficeContext constructor
            </summary>
            <param name="options"></param>
        </member>
        <member name="T:PMAuth.AuthDbContext.Entities.Admin">
            <summary>
            Admin entity
            </summary>
        </member>
        <member name="P:PMAuth.AuthDbContext.Entities.Admin.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:PMAuth.AuthDbContext.Entities.Admin.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="T:PMAuth.AuthDbContext.Entities.App">
            <summary>
            App entity
            </summary>
        </member>
        <member name="P:PMAuth.AuthDbContext.Entities.App.Id">
            <summary>
            App id
            </summary>
        </member>
        <member name="P:PMAuth.AuthDbContext.Entities.App.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:PMAuth.AuthDbContext.Entities.App.AdminId">
            <summary>
            Admin Id
            </summary>
        </member>
        <member name="P:PMAuth.AuthDbContext.Entities.App.Admin">
            <summary>
            Admin entity
            </summary>
        </member>
        <member name="T:PMAuth.AuthDbContext.Entities.Setting">
            <summary>
            Setting entity
            </summary>
        </member>
        <member name="P:PMAuth.AuthDbContext.Entities.Setting.Id">
            <summary>
            Setting id (identity)
            </summary>
        </member>
        <member name="P:PMAuth.AuthDbContext.Entities.Setting.AppId">
            <summary>
            App Id
            </summary>
        </member>
        <member name="P:PMAuth.AuthDbContext.Entities.Setting.App">
            <summary>
            App entity
            </summary>
        </member>
        <member name="P:PMAuth.AuthDbContext.Entities.Setting.SocialId">
            <summary>
            Social Id
            </summary>
        </member>
        <member name="P:PMAuth.AuthDbContext.Entities.Setting.Social">
            <summary>
            Social entity
            </summary>
        </member>
        <member name="P:PMAuth.AuthDbContext.Entities.Setting.ClientId">
            <summary>
            Client Id
            </summary>
        </member>
        <member name="P:PMAuth.AuthDbContext.Entities.Setting.SecretKey">
            <summary>
            Secret Key
            </summary>
        </member>
        <member name="P:PMAuth.AuthDbContext.Entities.Setting.Scope">
            <summary>
            Scope
            </summary>
        </member>
        <member name="T:PMAuth.AuthDbContext.Entities.Social">
            <summary>
            Social entity
            </summary>
        </member>
        <member name="P:PMAuth.AuthDbContext.Entities.Social.Id">
            <summary>
            Social id.
            </summary>
            <remarks>Primary key.</remarks>
        </member>
        <member name="P:PMAuth.AuthDbContext.Entities.Social.Name">
            <summary>
            Social name.
            </summary>
        </member>
        <member name="P:PMAuth.AuthDbContext.Entities.Social.AuthUri">
            <summary>
            Auth Uri
            </summary>
        </member>
        <member name="T:PMAuth.Controllers.ProfileController">
            <summary>
            Get user profile by authorization code 
            </summary>
        </member>
        <member name="M:PMAuth.Controllers.ProfileController.GetUserProfileAsync(System.Int32,PMAuth.Models.OAuthUniversal.AuthorizationCodeModel)">
            <summary>
            Get user profile
            </summary>
            <param name="appId">Application id (this id admin receives in the backoffice)</param>
            <param name="authCodeModel">Authorization code model </param>
            <returns>UserProfile or AuthorizationCodeExchangeExceptionModel</returns>
        </member>
        <member name="T:PMAuth.Controllers.SocialsController">
            <summary>
            Controller that operate socials.
            </summary>
        </member>
        <member name="M:PMAuth.Controllers.SocialsController.#ctor(PMAuth.AuthDbContext.BackOfficeContext)">
            <summary>
            SocialsController constructor
            </summary>
            <param name="context">BackOfficeContext</param>
        </member>
        <member name="M:PMAuth.Controllers.SocialsController.GetAllSocials(System.Int32)">
            <summary>
            Get all socials by app_id
            </summary>
            <param name="App_id">App_id header</param>
            <returns>
            <see cref="F:System.Net.HttpStatusCode.OK"/> SocialsModel
            <see cref="F:System.Net.HttpStatusCode.BadRequest"/> for unexisting app_id.
            </returns>
            <remarks>
            Get SocialModel from app_id header
            </remarks>
        </member>
        <member name="M:PMAuth.Controllers.SocialsController.GetLinkParameters(System.Int32,PMAuth.Models.SocialModel)">
            <summary>
            Get parameters for social auth link.
            </summary>
            <param name="App_id">App_id header</param>
            <param name="socialModel">Social Model</param>
            <returns>
            <see cref="F:System.Net.HttpStatusCode.OK"/> SocialLinkModel
            <see cref="F:System.Net.HttpStatusCode.BadRequest"/> for unexisting app_id or social_id.
            </returns>
            <remarks>
            Get SocialLinkModel from app_id header and social_id value.
            </remarks>
        </member>
        <member name="T:PMAuth.Controllers.WeatherForecastController">
            <summary>
            Eto nam ne nado, prosto testoviy endpoint
            </summary>
        </member>
        <member name="M:PMAuth.Controllers.WeatherForecastController.#ctor(Microsoft.Extensions.Logging.ILogger{PMAuth.Controllers.WeatherForecastController})">
            <summary>
            WeatherForecastController constructor
            </summary>
            <param name="logger"></param>
        </member>
        <member name="M:PMAuth.Controllers.WeatherForecastController.Get">
            <summary>
            Daje ne otkrivai
            </summary>
            <returns>IEnumerable WeatherForecast</returns>
            <remarks>
            Ny i zachem ti syda zawel???
            </remarks>
        </member>
        <member name="T:PMAuth.Exceptions.Models.AuthorizationCodeExchangeExceptionModel">
            <summary>
            Error model. It will be put in response if something went wrong while getting user profile from social network
            </summary>
        </member>
        <member name="P:PMAuth.Exceptions.Models.AuthorizationCodeExchangeExceptionModel.ErrorDescription">
            <summary>
            Detailed description of an error
            </summary>
        </member>
        <member name="P:PMAuth.Exceptions.Models.AuthorizationCodeExchangeExceptionModel.Error">
            <summary>
            Error message
            </summary>
        </member>
        <member name="T:PMAuth.Models.OAuthGoogle.GoogleTokensModel">
            <summary>
            Model for retrieving access and refresh tokens from Google 
            </summary>
        </member>
        <member name="P:PMAuth.Models.OAuthGoogle.GoogleTokensModel.IdToken">
            <summary>
            JWT token which contains all user info according to used scope
            </summary>
        </member>
        <member name="P:PMAuth.Models.OAuthGoogle.GoogleTokensModel.TokenType">
            <summary>
            Token type, always Bearer
            </summary>
        </member>
        <member name="P:PMAuth.Models.OAuthGoogle.GoogleTokensModel.Scope">
            <summary>
            Used scope
            </summary>
        </member>
        <member name="P:PMAuth.Models.OAuthGoogle.GoogleTokensModel.RefreshToken">
            <summary>
            Refresh token
            </summary>
        </member>
        <member name="T:PMAuth.Models.OAuthUniversal.AuthorizationCodeModel">
            <summary>
            Authorization code model 
            </summary>
        </member>
        <member name="P:PMAuth.Models.OAuthUniversal.AuthorizationCodeModel.SocialId">
            <summary>
            Id of the social network through which authorization is made
            </summary>
        </member>
        <member name="P:PMAuth.Models.OAuthUniversal.AuthorizationCodeModel.AuthorizationCode">
            <summary>
            Authorization code itself
            </summary>
        </member>
        <member name="P:PMAuth.Models.OAuthUniversal.AuthorizationCodeModel.RedirectUri">
            <summary>
            RedirectUri, for now it is hardcoded, so you can type anything here
            </summary>
        </member>
        <member name="T:PMAuth.Models.OAuthUniversal.TokenModel">
            <summary>
            Base token model. Can be used for multiple social networks
            </summary>
        </member>
        <member name="P:PMAuth.Models.OAuthUniversal.TokenModel.AccessToken">
            <summary>
            Access token which allows us to make calls to social network API
            </summary>
        </member>
        <member name="P:PMAuth.Models.OAuthUniversal.TokenModel.ExpiresIn">
            <summary>
            Expiration time of token in seconds
            </summary>
        </member>
        <member name="T:PMAuth.Models.OAuthUniversal.UserProfile">
            <summary>
            Unified model of user profile
            </summary>
        </member>
        <member name="P:PMAuth.Models.OAuthUniversal.UserProfile.Id">
            <summary>
            Users unique ID in social network used for authorization
            </summary>
        </member>
        <member name="P:PMAuth.Models.OAuthUniversal.UserProfile.AccessToken">
            <summary>
            Access token received from the social network
            </summary>
        </member>
        <member name="P:PMAuth.Models.OAuthUniversal.UserProfile.RefreshToken">
            <summary>
            Refresh token received from the social network (may be absent)
            </summary>
        </member>
        <member name="P:PMAuth.Models.OAuthUniversal.UserProfile.ExpiresIn">
            <summary>
            Token expiration time in seconds received from the social network
            </summary>
        </member>
        <member name="P:PMAuth.Models.OAuthUniversal.UserProfile.FirstName">
            <summary>
            User's first name received from the social network (may be absent)
            </summary>
        </member>
        <member name="P:PMAuth.Models.OAuthUniversal.UserProfile.LastName">
            <summary>
            User's last name received from the social network (may be absent)
            </summary>
        </member>
        <member name="P:PMAuth.Models.OAuthUniversal.UserProfile.Email">
            <summary>
            User's email received from the social network (may be absent)
            </summary>
        </member>
        <member name="P:PMAuth.Models.OAuthUniversal.UserProfile.IsVerifiedEmail">
            <summary>
            Is user's email verified received from the social network (may be absent)
            </summary>
        </member>
        <member name="P:PMAuth.Models.OAuthUniversal.UserProfile.Photo">
            <summary>
            User's profile photo link received from the social network (may be absent)
            </summary>
        </member>
        <member name="P:PMAuth.Models.OAuthUniversal.UserProfile.Locale">
            <summary>
            User's profile locale received from the social network (may be absent)
            </summary>
        </member>
        <member name="T:PMAuth.Models.SocialLinkModel">
            <summary>
            Social Link parameters
            </summary>
        </member>
        <member name="P:PMAuth.Models.SocialLinkModel.AuthUri">
            <summary>
            Auth Uri.
            </summary>
        </member>
        <member name="P:PMAuth.Models.SocialLinkModel.Prompt">
            <summary>
            Prompt.
            </summary>
        </member>
        <member name="P:PMAuth.Models.SocialLinkModel.ResponseType">
            <summary>
            Response Type.
            </summary>
        </member>
        <member name="P:PMAuth.Models.SocialLinkModel.ClientId">
            <summary>
            Client Id.
            </summary>
        </member>
        <member name="P:PMAuth.Models.SocialLinkModel.Scope">
            <summary>
            Scope.
            </summary>
        </member>
        <member name="P:PMAuth.Models.SocialLinkModel.AccessType">
            <summary>
            Access Type.
            </summary>
        </member>
        <member name="T:PMAuth.Models.SocialModel">
            <summary>
            Requested social model
            </summary>
        </member>
        <member name="P:PMAuth.Models.SocialModel.SocialId">
            <summary>
            Social Id.
            </summary>
        </member>
        <member name="T:PMAuth.Models.SocialsModel">
            <summary>
            A social model.
            </summary>
            <remarks>
            Model has list of socials.
            </remarks>
        </member>
        <member name="P:PMAuth.Models.SocialsModel.Socials">
            <summary>
            List of socials.
            </summary>
        </member>
        <member name="T:PMAuth.Program">
            <summary>
            Program class
            </summary>
        </member>
        <member name="M:PMAuth.Program.Main(System.String[])">
            <summary>
            Entry point (main)
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:PMAuth.Program.CreateHostBuilder(System.String[])">
            <summary>
            CreateHostBuilder
            </summary>
            <param name="args">string[] args</param>
            <returns>IHostBuilder</returns>
        </member>
        <member name="M:PMAuth.Services.Abstract.IAccessTokenReceivingService.ExchangeAuthorizationCodeForTokens(System.Int32,PMAuth.Models.OAuthUniversal.AuthorizationCodeModel)">
            <summary>
            Method for exchanging authorization code for access token
            </summary>
            <param name="appId">application ID</param>
            <param name="authenticationCodeModel">Model with authorization code</param>
            <returns>Model with access token and other info</returns>
            <exception cref="T:PMAuth.Exceptions.AuthorizationCodeExchangeException">
            The request failed due to an underlying issue such as network connectivity,
            DNS failure, server certificate validation, timeout or HTTP response is unsuccessful.
            </exception>
        </member>
        <member name="M:PMAuth.Services.Abstract.IProfileManager.GetUserProfileAsync(PMAuth.Models.OAuthUniversal.TokenModel)">
            <summary>
            
            </summary>
            <param name="tokensModel"></param>
            <returns></returns>
        </member>
        <member name="M:PMAuth.Services.Abstract.IUserProfileReceivingServiceContext.SetStrategies(PMAuth.Services.Abstract.IAccessTokenReceivingService,PMAuth.Services.Abstract.IProfileManager)">
            <summary>
            Set code flow for chosen social network
            </summary>
            <param name="accessTokenReceivingStrategy">service which exchanges authorization token on access token</param>
            <param name="profileManagerStrategy">service which gets user profile from social network and return unified user profile</param>
        </member>
        <member name="M:PMAuth.Services.Abstract.IUserProfileReceivingServiceContext.Execute(System.Int32,PMAuth.Models.OAuthUniversal.AuthorizationCodeModel)">
            <summary>
            Get user profile by authorization code
            </summary>
            <param name="appId">application ID</param>
            <param name="authorizationCodeModel">Model with authorization code</param>
            <returns>Unified user profile</returns>
            <exception cref="T:PMAuth.Exceptions.AuthorizationCodeExchangeException">
            The request failed due to an underlying issue such as network connectivity,
            DNS failure, server certificate validation, timeout or HTTP response is unsuccessful.
            </exception>
        </member>
        <member name="T:PMAuth.Services.MigrationService">
            <summary>
            Migration service.
            </summary>
        </member>
        <member name="M:PMAuth.Services.MigrationService.#ctor(System.IServiceProvider)">
            <summary>
            MigrationService constructor.
            </summary>
            <param name="serviceProvider">IServiceProvider</param>
        </member>
        <member name="M:PMAuth.Services.MigrationService.StartAsync(System.Threading.CancellationToken)">
            <summary>
            Start migration service Async
            </summary>
            <param name="cancellationToken">CancellationToken</param>
            <returns>Task</returns>
        </member>
        <member name="M:PMAuth.Services.MigrationService.StopAsync(System.Threading.CancellationToken)">
            <summary>
            Stop migration service Async
            </summary>
            <param name="cancellationToken">CancellationToken</param>
            <returns>Task</returns>
        </member>
        <member name="T:PMAuth.Startup">
            <summary>
            Startup
            </summary>
        </member>
        <member name="M:PMAuth.Startup.#ctor(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Startup constructor
            </summary>
            <param name="configuration">IConfiguration</param>
        </member>
        <member name="P:PMAuth.Startup.Configuration">
            <summary>
            Configuration
            </summary>
        </member>
        <member name="M:PMAuth.Startup.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            This method gets called by the runtime. Use this method to add services to the container.
            </summary>
            <param name="services">IServiceCollection</param>
        </member>
        <member name="M:PMAuth.Startup.Configure(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Hosting.IWebHostEnvironment)">
            <summary>
            This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
            </summary>
            <param name="app">IApplicationBuilder</param>
            <param name="env">IWebHostEnvironment</param>
        </member>
        <member name="T:PMAuth.WeatherForecast">
            <summary>
            Vse ewe ne ponimau za4em ti eto smotriw ...
            </summary>
        </member>
        <member name="P:PMAuth.WeatherForecast.Date">
            <summary>
            Date
            </summary>
        </member>
        <member name="P:PMAuth.WeatherForecast.TemperatureC">
            <summary>
            TemperatureC
            </summary>
        </member>
        <member name="P:PMAuth.WeatherForecast.TemperatureF">
            <summary>
            TemperatureF
            </summary>
        </member>
        <member name="P:PMAuth.WeatherForecast.Summary">
            <summary>
            Summary
            </summary>
        </member>
    </members>
</doc>
