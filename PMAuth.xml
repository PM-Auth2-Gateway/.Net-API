<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PMAuth</name>
    </assembly>
    <members>
        <member name="T:PMAuth.AuthDbContext.BackOfficeContext">
            <summary>
            BackOfficeContext
            </summary>
        </member>
        <member name="P:PMAuth.AuthDbContext.BackOfficeContext.Admins">
            <summary>
            Admins DbSet
            </summary>
        </member>
        <member name="P:PMAuth.AuthDbContext.BackOfficeContext.Apps">
            <summary>
            Apps DbSet
            </summary>
        </member>
        <member name="P:PMAuth.AuthDbContext.BackOfficeContext.Socials">
            <summary>
            Socials DbSet
            </summary>
        </member>
        <member name="P:PMAuth.AuthDbContext.BackOfficeContext.Settings">
            <summary>
            Settings DbSet
            </summary>
        </member>
        <member name="M:PMAuth.AuthDbContext.BackOfficeContext.#ctor(Microsoft.EntityFrameworkCore.DbContextOptions{PMAuth.AuthDbContext.BackOfficeContext})">
            <summary>
            BackOfficeContext constructor
            </summary>
            <param name="options"></param>
        </member>
        <member name="T:PMAuth.AuthDbContext.Entities.Admin">
            <summary>
            Admin entity
            </summary>
        </member>
        <member name="P:PMAuth.AuthDbContext.Entities.Admin.Id">
            <summary>
            Admin Id
            </summary>
        </member>
        <member name="P:PMAuth.AuthDbContext.Entities.Admin.Name">
            <summary>
            Admin Name
            </summary>
        </member>
        <member name="T:PMAuth.AuthDbContext.Entities.App">
            <summary>
            App entity
            </summary>
        </member>
        <member name="P:PMAuth.AuthDbContext.Entities.App.Id">
            <summary>
            App id
            </summary>
        </member>
        <member name="P:PMAuth.AuthDbContext.Entities.App.Name">
            <summary>
            Application Name
            </summary>
        </member>
        <member name="P:PMAuth.AuthDbContext.Entities.App.AdminId">
            <summary>
            Admin Id
            </summary>
        </member>
        <member name="P:PMAuth.AuthDbContext.Entities.App.Admin">
            <summary>
            Admin entity
            </summary>
        </member>
        <member name="T:PMAuth.AuthDbContext.Entities.Setting">
            <summary>
            Setting entity
            </summary>
        </member>
        <member name="P:PMAuth.AuthDbContext.Entities.Setting.Id">
            <summary>
            Setting id (identity)
            </summary>
        </member>
        <member name="P:PMAuth.AuthDbContext.Entities.Setting.AppId">
            <summary>
            Application Id
            </summary>
        </member>
        <member name="P:PMAuth.AuthDbContext.Entities.Setting.App">
            <summary>
            App entity
            </summary>
        </member>
        <member name="P:PMAuth.AuthDbContext.Entities.Setting.SocialId">
            <summary>
            Social Id
            </summary>
        </member>
        <member name="P:PMAuth.AuthDbContext.Entities.Setting.Social">
            <summary>
            Social entity
            </summary>
        </member>
        <member name="P:PMAuth.AuthDbContext.Entities.Setting.ClientId">
            <summary>
            Client Id
            </summary>
        </member>
        <member name="P:PMAuth.AuthDbContext.Entities.Setting.SecretKey">
            <summary>
            Secret Key - secret field setting in application
            </summary>
        </member>
        <member name="P:PMAuth.AuthDbContext.Entities.Setting.Scope">
            <summary>
            Scope - bunch of accessed information by user.
            </summary>
        </member>
        <member name="T:PMAuth.AuthDbContext.Entities.Social">
            <summary>
            Social entity
            </summary>
        </member>
        <member name="P:PMAuth.AuthDbContext.Entities.Social.Id">
            <summary>
            Social id.
            </summary>
            <remarks>Primary key.</remarks>
        </member>
        <member name="P:PMAuth.AuthDbContext.Entities.Social.Name">
            <summary>
            Social name.
            </summary>
        </member>
        <member name="P:PMAuth.AuthDbContext.Entities.Social.AuthUri">
            <summary>
            Auth Uri - base link of some service which offer authentication.
            </summary>
        </member>
        <member name="P:PMAuth.AuthDbContext.Entities.Social.TokenUrl">
            <summary>
            Token Url - adress which operate with tokens
            </summary>
        </member>
        <member name="P:PMAuth.AuthDbContext.Entities.Social.LogoPath">
            <summary>
            Path where stored a logo
            </summary>
        </member>
        <member name="T:PMAuth.Controllers.AdminController">
            <summary>
            Admin Api for access to setting application
            </summary>
        </member>
        <member name="M:PMAuth.Controllers.AdminController.#ctor(PMAuth.AuthDbContext.BackOfficeContext,PMAuth.Services.AuthAdmin.AuthService,PMAuth.Services.AuthAdmin.RefreshTokenService,Microsoft.Extensions.Caching.Memory.IMemoryCache,Microsoft.Extensions.Logging.ILogger{PMAuth.Controllers.AdminController})">
            <inheritdoc />
        </member>
        <member name="M:PMAuth.Controllers.AdminController.GetTokenTest">
            <summary>
            Get token for testing
            </summary>
            <returns>Token</returns>
        </member>
        <member name="M:PMAuth.Controllers.AdminController.GetTokenAndProfile(PMAuth.Models.RequestModels.SessionIdModel)">
            <summary>
            Get admin profile with token access
            </summary>
            <param name="sessionIdModel">Model which contains session ID</param>
            <returns>AdminProfile or ErrorModel if profile wasn't found</returns>
        </member>
        <member name="M:PMAuth.Controllers.AdminController.Refresh(System.String)">
            <summary>
            Get new access token 
            </summary>
            <param name="token">Old access token</param>
            <returns>AuthModel or error if refresh token wasn't found</returns>
        </member>
        <member name="M:PMAuth.Controllers.AdminController.GetApps">
            <summary>
            Get all applications foe logged in admin
            </summary>
            <returns>AppModel[] or error if refresh admin wasn't found</returns>
        </member>
        <member name="M:PMAuth.Controllers.AdminController.PostApp(PMAuth.Models.CreateAppModel)">
            <summary>
            Post new application 
            </summary>
            <param name="createApp">Information about application</param>
            <returns>AppModel or error if admin Id wasn't found</returns>
        </member>
        <member name="M:PMAuth.Controllers.AdminController.GetAppInfo(System.Int32)">
            <summary>
            Get information about application 
            </summary>
            <param name="appId">Id application</param>
            <returns>AppModel or error if admin,app Id wasn't found</returns>
        </member>
        <member name="M:PMAuth.Controllers.AdminController.DeleteApp(System.Int32)">
            <summary>
            Delete application 
            </summary>
            <param name="appId">Id application</param>
            <returns>200 or error if admin,app Id wasn't found</returns>
        </member>
        <member name="M:PMAuth.Controllers.AdminController.PutApp(System.Int32,PMAuth.Models.CreateAppModel)">
            <summary>
            Put information of application 
            </summary>
            <param name="appId">Id application</param>
            <param name="createApp">Object save information about application</param>
            <returns>AppModel or error if admin,app id wasn't found</returns>
        </member>
        <member name="M:PMAuth.Controllers.AdminController.GetSocials(System.Int32)">
            <summary>
            Get list of Socials which have settings for application
            </summary>
            <param name="appId">Id application</param>
            <returns>SocialModelResponse[] or error if admin,app id wasn't found</returns>
        </member>
        <member name="M:PMAuth.Controllers.AdminController.GetSocialSetting(System.Int32,System.Int32)">
            <summary>
            Get settings of application
            </summary>
            <param name="appId">Id application</param>
            <param name="socialId">Id social</param>
            <returns>SettingModel or error if admin,app,social id wasn't found</returns>
        </member>
        <member name="M:PMAuth.Controllers.AdminController.PostSocialSetting(System.Int32,System.Int32,PMAuth.Models.SocialCreateModel)">
            <summary>
            Post social settings of application
            </summary>
            <param name="appId">Id application</param>
            <param name="socialId">Id social</param>
            <param name="social">information of social setting</param>
            <returns>SettingModel or error if admin,app,social id wasn't found</returns>
        </member>
        <member name="M:PMAuth.Controllers.AdminController.PutSocialSetting(System.Int32,System.Int32,PMAuth.Models.SocialCreateModel)">
            <summary>
            Put social settings of application
            </summary>
            <param name="appId">Id application</param>
            <param name="socialId">Id social</param>
            <param name="social">information of social setting</param>
            <returns>SettingModel or error if admin,app,social id wasn't found</returns>
        </member>
        <member name="T:PMAuth.Controllers.ProfileController">
            <summary>
            Get user profile by session id
            </summary>
        </member>
        <member name="M:PMAuth.Controllers.ProfileController.GetUserProfileAsync(System.Int32,PMAuth.Models.RequestModels.SessionIdModel)">
            <summary>
            Get user profile. Max time of execution for this endpoint is 10 secs
            </summary>
            <param name="appId">Application id (this id admin receives in the backoffice)</param>
            <param name="sessionIdModel">Model which contains session ID</param>
            <returns>UserProfile or ErrorModel if profile wasn't found</returns>
        </member>
        <member name="T:PMAuth.Controllers.RedirectController">
            <summary>
            Controller for handling redirect from social network services
            </summary>
        </member>
        <member name="M:PMAuth.Controllers.RedirectController.ReceiveAuthorizationCodeGoogle(PMAuth.Models.RequestModels.RedirectionErrorModelGoogle,PMAuth.Models.OAuthUniversal.RedirectPart.AuthorizationCodeModel)">
            <summary>
            Handle redirect from Google
            </summary>
            <param name="error"></param>
            <param name="authorizationCode"></param>
            <returns></returns>
        </member>
        <member name="M:PMAuth.Controllers.RedirectController.ReceiveAuthorizationCodeFacebook(PMAuth.Models.RequestModels.RedirectionErrorModelFacebook,PMAuth.Models.OAuthUniversal.RedirectPart.AuthorizationCodeModel)">
            <summary>
            Handle redirect from Facebook
            </summary>
            <param name="error"></param>
            <param name="authorizationCode"></param>
            <returns></returns>
        </member>
        <member name="T:PMAuth.Controllers.SocialsController">
            <summary>
            Controller that operate socials.
            </summary>
        </member>
        <member name="M:PMAuth.Controllers.SocialsController.#ctor(PMAuth.AuthDbContext.BackOfficeContext,Microsoft.Extensions.Caching.Memory.IMemoryCache)">
            <summary>
            SocialsController constructor
            </summary>
            <param name="context">BackOfficeContext</param>
            <param name="cache"></param>
        </member>
        <member name="M:PMAuth.Controllers.SocialsController.GetAllSocials(System.Int32)">
            <summary>
            Get all socials by app_id
            </summary>
            <param name="App_id">App_id header</param>
            <returns>
            <see cref="F:System.Net.HttpStatusCode.OK"/> SocialsModel
            <see cref="F:System.Net.HttpStatusCode.BadRequest"/> for unexisting app_id.
            </returns>
            <remarks>
            Get SocialModel from app_id header
            </remarks>
        </member>
        <member name="M:PMAuth.Controllers.SocialsController.GetLinkParameters(System.Int32,PMAuth.Models.SocialsClient.SocialModel)">
            <summary>
            Get parameters for social auth link.
            </summary>
            <param name="App_id">App_id header</param>
            <param name="socialModel">Social Model</param>
            <returns>
            <see cref="F:System.Net.HttpStatusCode.OK"/> SocialLinkModel
            <see cref="F:System.Net.HttpStatusCode.BadRequest"/> for unexisting app_id or social_id.
            </returns>
            <remarks>
            Get SocialLinkModel from app_id header and social_id value.
            </remarks>
        </member>
        <member name="T:PMAuth.Controllers.WeatherForecastController">
            <summary>
            Eto nam ne nado, prosto testoviy endpoint
            </summary>
        </member>
        <member name="M:PMAuth.Controllers.WeatherForecastController.#ctor(Microsoft.Extensions.Logging.ILogger{PMAuth.Controllers.WeatherForecastController})">
            <summary>
            WeatherForecastController constructor
            </summary>
            <param name="logger"></param>
        </member>
        <member name="M:PMAuth.Controllers.WeatherForecastController.Get">
            <summary>
            Daje ne otkrivai
            </summary>
            <returns>IEnumerable WeatherForecast</returns>
            <remarks>
            Ny i zachem ti syda zawel???
            </remarks>
        </member>
        <member name="T:PMAuth.Exceptions.Models.ErrorModel">
            <summary>
            Error model that will be returned if something will go wrong after user redirection to social network service 
            </summary>
        </member>
        <member name="P:PMAuth.Exceptions.Models.ErrorModel.ErrorCode">
            <summary>
            Error code.
            10 - Session id expired or doesn't exists
            12 - User aborted authorization
            14 - Error occured during authorization
            16 - Invalid id
            18 - Token error
            </summary>
        </member>
        <member name="P:PMAuth.Exceptions.Models.ErrorModel.Error">
            <summary>
            Error
            </summary>
        </member>
        <member name="P:PMAuth.Exceptions.Models.ErrorModel.ErrorDescription">
            <summary>
            Detailed description of an error
            </summary>
        </member>
        <member name="T:PMAuth.Extensions.ReformScopeToFields">
            <summary>
            Class reform all scope values to Facebook fields, to perform user info request.
            </summary>
        </member>
        <member name="M:PMAuth.Extensions.ReformScopeToFields.Transform(System.String)">
            <summary>
            Method checks if scope is empty or null, then return nothing;
            Else transform sopes to fields values
            </summary>
            <param name="scope">User Scope</param>
            <returns>
            Empty string if scope is emty
                Or
            Valid fields values, 
                as Http query
            </returns>
        </member>
        <member name="T:PMAuth.Models.AppModel">
            <summary>
            Model application with information
            </summary>
        </member>
        <member name="M:PMAuth.Models.AppModel.#ctor(System.Int32,System.String)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:PMAuth.Models.AppModel.Id">
            <summary>
            Application Id
            </summary>
        </member>
        <member name="P:PMAuth.Models.AppModel.Name">
            <summary>
            Name application
            </summary>
        </member>
        <member name="M:PMAuth.Models.AuthModel.#ctor(System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="name"></param>
            <param name="token"></param>
        </member>
        <member name="P:PMAuth.Models.AuthModel.Name">
            <summary>
            Name admin
            </summary>
        </member>
        <member name="P:PMAuth.Models.AuthModel.Token">
            <summary>
            Jwt Access token
            </summary>
        </member>
        <member name="T:PMAuth.Models.CreateAppModel">
            <summary>
            Model of information about application will be created
            </summary>
        </member>
        <member name="P:PMAuth.Models.CreateAppModel.Name">
            <summary>
            Name application
            </summary>
        </member>
        <member name="T:PMAuth.Models.OAuthFacebook.FacebookInfoModel">
            <summary>
            Facebook user information model on scopes
            </summary>
        </member>
        <member name="P:PMAuth.Models.OAuthFacebook.FacebookInfoModel.Id">
            <summary>
            User id.
            </summary>
        </member>
        <member name="P:PMAuth.Models.OAuthFacebook.FacebookInfoModel.FirstName">
            <summary>
            User first name.
            </summary>
        </member>
        <member name="P:PMAuth.Models.OAuthFacebook.FacebookInfoModel.LastName">
            <summary>
            User last name.
            </summary>
        </member>
        <member name="P:PMAuth.Models.OAuthFacebook.FacebookInfoModel.FullName">
            <summary>
            Full user's name
            </summary>
        </member>
        <member name="P:PMAuth.Models.OAuthFacebook.FacebookInfoModel.Email">
            <summary>
            User registered Email.
            </summary>
        </member>
        <member name="P:PMAuth.Models.OAuthFacebook.FacebookInfoModel.AdditionalInformation">
            <summary>
            Key-value pairs ("paramName": "value") of additional information about user.
            </summary>
        </member>
        <member name="T:PMAuth.Models.OAuthFacebook.FacebookProperties">
            <summary>
            Json facebook properties
            </summary>
        </member>
        <member name="P:PMAuth.Models.OAuthFacebook.FacebookProperties.GetProfileLink">
            <summary>
            Facebook link that getting user info
            </summary>
        </member>
        <member name="T:PMAuth.Models.OAuthFacebook.FacebookTokensModel">
            <summary>
            Model for retrieving access token and scope from Facebook 
            </summary>
        </member>
        <member name="P:PMAuth.Models.OAuthFacebook.FacebookTokensModel.TokenType">
            <summary>
            Token type, always Bearer
            </summary>
        </member>
        <member name="P:PMAuth.Models.OAuthFacebook.FacebookTokensModel.Scope">
            <summary>
            Used scope
            </summary>
        </member>
        <member name="T:PMAuth.Models.OAuthGoogle.GoogleTokensModel">
            <summary>
            Model for retrieving access and refresh tokens from Google 
            </summary>
        </member>
        <member name="P:PMAuth.Models.OAuthGoogle.GoogleTokensModel.IdToken">
            <summary>
            JWT token which contains all user info according to used scope
            </summary>
        </member>
        <member name="P:PMAuth.Models.OAuthGoogle.GoogleTokensModel.TokenType">
            <summary>
            Token type, always Bearer
            </summary>
        </member>
        <member name="P:PMAuth.Models.OAuthGoogle.GoogleTokensModel.Scope">
            <summary>
            Used scope
            </summary>
        </member>
        <member name="P:PMAuth.Models.OAuthGoogle.GoogleTokensModel.RefreshToken">
            <summary>
            Refresh token
            </summary>
        </member>
        <member name="T:PMAuth.Models.OAuthUniversal.AdminProfile">
            <summary>
            Unified model of admin profile
            </summary>
        </member>
        <member name="P:PMAuth.Models.OAuthUniversal.AdminProfile.Token">
            <summary>
            Access token what need from authentication
            </summary>
        </member>
        <member name="M:PMAuth.Models.OAuthUniversal.AdminProfile.#ctor(PMAuth.Models.OAuthUniversal.UserProfile)">
            <inheritdoc />
        </member>
        <member name="T:PMAuth.Models.OAuthUniversal.CacheModel">
            <summary>
            CasheModel for store info in cache
            </summary>
        </member>
        <member name="P:PMAuth.Models.OAuthUniversal.CacheModel.SocialId">
            <summary>
            Social Id.
            </summary>
        </member>
        <member name="P:PMAuth.Models.OAuthUniversal.CacheModel.AccessToken">
            <summary>
            Access Token - allow user receiving information about him
            </summary>
        </member>
        <member name="P:PMAuth.Models.OAuthUniversal.CacheModel.UserProfile">
            <summary>
            User Profile where stored user info
            </summary>
        </member>
        <member name="P:PMAuth.Models.OAuthUniversal.CacheModel.Device">
            <summary>
            Device - field which inform what type of device will recieve a redirect
            </summary>
        </member>
        <member name="P:PMAuth.Models.OAuthUniversal.CacheModel.AppId">
            <summary>
            Application Id
            </summary>
        </member>
        <member name="P:PMAuth.Models.OAuthUniversal.CacheModel.RedirectUri">
            <summary>
            Redirect Url
            </summary>
        </member>
        <member name="P:PMAuth.Models.OAuthUniversal.CacheModel.UserStartedAuthorization">
            <summary>
            If error occured this property is not null. If it is null, then everything is fine
            </summary>
        </member>
        <member name="T:PMAuth.Models.OAuthUniversal.RedirectPart.AuthorizationCodeModel">
            <summary>
            Authorization code model 
            </summary>
        </member>
        <member name="P:PMAuth.Models.OAuthUniversal.RedirectPart.AuthorizationCodeModel.AuthorizationCode">
            <summary>
            Authorization code
            </summary>
        </member>
        <member name="P:PMAuth.Models.OAuthUniversal.RedirectPart.AuthorizationCodeModel.Scope">
            <summary>
            Scope
            </summary>
        </member>
        <member name="P:PMAuth.Models.OAuthUniversal.RedirectPart.AuthorizationCodeModel.SessionId">
            <summary>
            Session ID
            </summary>
        </member>
        <member name="T:PMAuth.Models.OAuthUniversal.TokenModel">
            <summary>
            Base token model. Can be used for multiple social networks
            </summary>
        </member>
        <member name="P:PMAuth.Models.OAuthUniversal.TokenModel.AccessToken">
            <summary>
            Access token which allows us to make calls to social network API
            </summary>
        </member>
        <member name="P:PMAuth.Models.OAuthUniversal.TokenModel.ExpiresIn">
            <summary>
            Expiration time of token in seconds
            </summary>
        </member>
        <member name="T:PMAuth.Models.OAuthUniversal.UserProfile">
            <summary>
            Unified model of user profile
            </summary>
        </member>
        <member name="P:PMAuth.Models.OAuthUniversal.UserProfile.Id">
            <summary>
            Users unique ID in social network used for authorization
            </summary>
        </member>
        <member name="P:PMAuth.Models.OAuthUniversal.UserProfile.FirstName">
            <summary>
            User's first name received from the social network (may be absent)
            </summary>
        </member>
        <member name="P:PMAuth.Models.OAuthUniversal.UserProfile.LastName">
            <summary>
            User's last name received from the social network (may be absent)
            </summary>
        </member>
        <member name="P:PMAuth.Models.OAuthUniversal.UserProfile.Name">
            <summary>
            Full user's name
            </summary>
        </member>
        <member name="P:PMAuth.Models.OAuthUniversal.UserProfile.Email">
            <summary>
            User's email received from the social network (may be absent)
            </summary>
        </member>
        <member name="P:PMAuth.Models.OAuthUniversal.UserProfile.IsVerifiedEmail">
            <summary>
            Is user's email verified received from the social network (may be absent)
            </summary>
        </member>
        <member name="P:PMAuth.Models.OAuthUniversal.UserProfile.Photo">
            <summary>
            User's profile photo link received from the social network (may be absent)
            </summary>
        </member>
        <member name="P:PMAuth.Models.OAuthUniversal.UserProfile.Locale">
            <summary>
            User's profile locale received from the social network (may be absent)
            </summary>
        </member>
        <member name="P:PMAuth.Models.OAuthUniversal.UserProfile.AdditionalInformation">
            <summary>
            Key-value pairs ("paramName": "value") of additional information about user
            </summary>
        </member>
        <member name="P:PMAuth.Models.RequestModels.RedirectionErrorModelGoogle.Error">
            <summary>
            Error
            </summary>
        </member>
        <member name="P:PMAuth.Models.RequestModels.RedirectionErrorModelGoogle.ErrorDescription">
            <summary>
            Detailed description of an error
            </summary>
        </member>
        <member name="P:PMAuth.Models.SettingModel.Id">
            <summary>
            Setting id (identity)
            </summary>
        </member>
        <member name="P:PMAuth.Models.SettingModel.AppId">
            <summary>
            App Id
            </summary>
        </member>
        <member name="P:PMAuth.Models.SettingModel.AppName">
            <summary>
            App name
            </summary>
        </member>
        <member name="P:PMAuth.Models.SettingModel.SocialId">
            <summary>
            Social Id
            </summary>
        </member>
        <member name="P:PMAuth.Models.SettingModel.SocialName">
            <summary>
            Social name
            </summary>
        </member>
        <member name="P:PMAuth.Models.SettingModel.ClientId">
            <summary>
            Client Id
            </summary>
        </member>
        <member name="P:PMAuth.Models.SettingModel.SecretKey">
            <summary>
            Secret Key
            </summary>
        </member>
        <member name="P:PMAuth.Models.SettingModel.Scope">
            <summary>
            Scope
            </summary>
        </member>
        <member name="M:PMAuth.Models.SettingModel.#ctor(System.Int32,System.Int32,System.String,System.Int32,System.String,System.String,System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="id"></param>
            <param name="appId"></param>
            <param name="appName"></param>
            <param name="socialId"></param>
            <param name="socialName"></param>
            <param name="clientId"></param>
            <param name="secretKey"></param>
            <param name="scope"></param>
        </member>
        <member name="P:PMAuth.Models.SocialCreateModel.ClientId">
            <summary>
            Client Id
            </summary>
        </member>
        <member name="P:PMAuth.Models.SocialCreateModel.Scope">
            <summary>
            Scope
            </summary>
        </member>
        <member name="P:PMAuth.Models.SocialCreateModel.SecretKey">
            <summary>
            Secret Key
            </summary>
        </member>
        <member name="T:PMAuth.Models.SocialModelResponse">
            <summary>
            Model of information about social 
            </summary>
        </member>
        <member name="P:PMAuth.Models.SocialModelResponse.Id">
            <summary>
            Id social
            </summary>
        </member>
        <member name="P:PMAuth.Models.SocialModelResponse.Name">
            <summary>
            Name social
            </summary>
        </member>
        <member name="P:PMAuth.Models.SocialModelResponse.IsSetting">
            <summary>
            True if this social have setting for application
            </summary>
        </member>
        <member name="M:PMAuth.Models.SocialModelResponse.#ctor(System.Int32,System.String,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="id"></param>
            <param name="name"></param>
            <param name="isSetting"></param>
        </member>
        <member name="T:PMAuth.Models.SocialsClient.SocialLinkModel">
            <summary>
            Social Link parameters
            </summary>
        </member>
        <member name="P:PMAuth.Models.SocialsClient.SocialLinkModel.AuthUri">
            <summary>
            Auth Uri - base link of some service which offer authentication.
            </summary>
        </member>
        <member name="P:PMAuth.Models.SocialsClient.SocialLinkModel.RedirectUri">
            <summary>
            Redirect Uri - on which adress.
            </summary>
        </member>
        <member name="P:PMAuth.Models.SocialsClient.SocialLinkModel.ResponseType">
            <summary>
            Response Type - default = code.
            </summary>
        </member>
        <member name="P:PMAuth.Models.SocialsClient.SocialLinkModel.ClientId">
            <summary>
            Client Id.
            </summary>
        </member>
        <member name="P:PMAuth.Models.SocialsClient.SocialLinkModel.Scope">
            <summary>
            Scope - bunch of accessed information by user.
            </summary>
        </member>
        <member name="P:PMAuth.Models.SocialsClient.SocialLinkModel.State">
            <summary>
            State - session id.
            </summary>
        </member>
        <member name="T:PMAuth.Models.SocialsClient.SocialModel">
            <summary>
            Requested social model
            </summary>
        </member>
        <member name="P:PMAuth.Models.SocialsClient.SocialModel.SocialId">
            <summary>
            Social Id.
            </summary>
        </member>
        <member name="P:PMAuth.Models.SocialsClient.SocialModel.Device">
            <summary>
            Device - field which inform what type of device will recieve a redirect
            </summary>
        </member>
        <member name="T:PMAuth.Models.SocialsClient.SocialsModel">
            <summary>
            A social model.
            </summary>
            <remarks>
            Model has list of socials.
            </remarks>
        </member>
        <member name="P:PMAuth.Models.SocialsClient.SocialsModel.Socials">
            <summary>
            List of socials which is registered by user in some application.
            </summary>
        </member>
        <member name="T:PMAuth.Program">
            <summary>
            Program class
            </summary>
        </member>
        <member name="M:PMAuth.Program.Main(System.String[])">
            <summary>
            Entry point (main)
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:PMAuth.Program.CreateHostBuilder(System.String[])">
            <summary>
            CreateHostBuilder
            </summary>
            <param name="args">string[] args</param>
            <returns>IHostBuilder</returns>
        </member>
        <member name="M:PMAuth.Services.Abstract.IAccessTokenReceivingService.ExchangeAuthorizationCodeForTokens(System.Int32,PMAuth.Models.OAuthUniversal.RedirectPart.AuthorizationCodeModel)">
            <summary>
            Method for exchanging authorization code for access token
            </summary>
            <param name="appId">application ID</param>
            <param name="authenticationCodeModel">Model with authorization code</param>
            <returns>Model with access token and other info</returns>
            <exception cref="T:PMAuth.Exceptions.AuthorizationCodeExchangeException">
            The request failed due to an underlying issue such as network connectivity,
            DNS failure, server certificate validation, timeout or HTTP response is unsuccessful.
            </exception>
        </member>
        <member name="T:PMAuth.Services.Abstract.IProfileManagingService">
            <summary>
            Managing user's profile information
            </summary>
        </member>
        <member name="M:PMAuth.Services.Abstract.IProfileManagingService.GetUserProfileAsync(PMAuth.Models.OAuthUniversal.TokenModel,System.String)">
            <summary>
            Method gets user profile in registered socials,
                by their tokens and user session id.
            </summary>
            <param name="tokensModel">
            Token model, which contains tokens and may being extends.
            </param>
            <param name="sessionId">
            User session Id that gives when user push the auth button
            </param>
            <returns>Nothing</returns>
        </member>
        <member name="T:PMAuth.Services.Abstract.IUserProfileReceivingServiceContext">
            <summary>
            Context for setting code flow for processing exchange of authorization code on user profile
            Consists of two strategies.
            1. Strategy of exchanging authorization code for access token (IAccessTokenReceivingService)
                1.1 All exceptions that occurs during the process of code exchange should be wrapped into AuthorizationCodeExchangeException
            2. Strategy of getting user profile from the social network and returning it in unified model (UserProfile)
                2.1 If on this stage you need to make calls to the social network API, exception during these calls should be also
                wrapped into AuthorizationCodeExchangeException.
                2.2 If there may be some exceptions regarding models mapping (like JsonException), contact your teammates and
                introduce a new type of exception to avoid leaky abstraction
            </summary>
        </member>
        <member name="M:PMAuth.Services.Abstract.IUserProfileReceivingServiceContext.SetStrategies(PMAuth.Services.Abstract.IAccessTokenReceivingService,PMAuth.Services.Abstract.IProfileManagingService)">
            <summary>
            Set code flow for chosen social network
            </summary>
            <param name="accessTokenReceivingStrategy">service which exchanges authorization token on access token</param>
            <param name="profileManagerStrategy">service which gets user profile from social network and return unified user profile</param>
        </member>
        <member name="M:PMAuth.Services.Abstract.IUserProfileReceivingServiceContext.Execute(System.Int32,PMAuth.Models.OAuthUniversal.RedirectPart.AuthorizationCodeModel)">
            <summary>
            Get user profile by authorization code
            </summary>
            <param name="appId">application ID</param>
            <param name="authorizationCodeModel">Model with authorization code</param>
            <returns>Unified user profile</returns>
            <exception cref="T:PMAuth.Exceptions.AuthorizationCodeExchangeException">
            The request failed due to an underlying issue such as network connectivity,
            DNS failure, server certificate validation, timeout or HTTP response is unsuccessful.
            </exception>
        </member>
        <member name="T:PMAuth.Services.FacebookOAuth.FacebookAccessTokenReceivingService">
            <summary>
            Service that operates Facebook Access token
            </summary>
        </member>
        <member name="M:PMAuth.Services.FacebookOAuth.FacebookAccessTokenReceivingService.ExchangeAuthorizationCodeForTokens(System.Int32,PMAuth.Models.OAuthUniversal.RedirectPart.AuthorizationCodeModel)">
            <summary>
            Method that exchange user authorization code for tokens
            </summary>
            <param name="appId">Application Id</param>
            <param name="authorizationCodeModel">
            Authorization model that has code, scope and state
            </param>
            <returns>Tokens model</returns>
        </member>
        <member name="T:PMAuth.Services.FacebookOAuth.FacebookProfileManager">
            <summary>
            Managing user's Facebook profile information 
            - get user info via tokens
            </summary>
        </member>
        <member name="T:PMAuth.Services.MigrationService">
            <summary>
            Migration service.
            </summary>
        </member>
        <member name="M:PMAuth.Services.MigrationService.#ctor(System.IServiceProvider)">
            <summary>
            MigrationService constructor.
            </summary>
            <param name="serviceProvider">IServiceProvider</param>
        </member>
        <member name="M:PMAuth.Services.MigrationService.StartAsync(System.Threading.CancellationToken)">
            <summary>
            Start migration service Async
            </summary>
            <param name="cancellationToken">CancellationToken</param>
            <returns>Task</returns>
        </member>
        <member name="M:PMAuth.Services.MigrationService.StopAsync(System.Threading.CancellationToken)">
            <summary>
            Stop migration service Async
            </summary>
            <param name="cancellationToken">CancellationToken</param>
            <returns>Task</returns>
        </member>
        <member name="T:PMAuth.Startup">
            <summary>
            Startup
            </summary>
        </member>
        <member name="M:PMAuth.Startup.#ctor(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Startup constructor
            </summary>
            <param name="configuration">IConfiguration</param>
        </member>
        <member name="P:PMAuth.Startup.Configuration">
            <summary>
            Configuration
            </summary>
        </member>
        <member name="M:PMAuth.Startup.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            This method gets called by the runtime. Use this method to add services to the container.
            </summary>
            <param name="services">IServiceCollection</param>
        </member>
        <member name="M:PMAuth.Startup.Configure(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Hosting.IWebHostEnvironment)">
            <summary>
            This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
            </summary>
            <param name="app">IApplicationBuilder</param>
            <param name="env">IWebHostEnvironment</param>
        </member>
        <member name="T:PMAuth.WeatherForecast">
            <summary>
            Vse ewe ne ponimau za4em ti eto smotriw ...
            </summary>
        </member>
        <member name="P:PMAuth.WeatherForecast.Date">
            <summary>
            Date
            </summary>
        </member>
        <member name="P:PMAuth.WeatherForecast.TemperatureC">
            <summary>
            TemperatureC
            </summary>
        </member>
        <member name="P:PMAuth.WeatherForecast.TemperatureF">
            <summary>
            TemperatureF
            </summary>
        </member>
        <member name="P:PMAuth.WeatherForecast.Summary">
            <summary>
            Summary
            </summary>
        </member>
    </members>
</doc>
